{"version":3,"file":"rock-paper-scissor.js","names":["RockPaperScissors","selector","evt","btn","target","move","dataset","console","log","player1move","player2move","player2","randomGuess","MOVES","latestOutcome","pickWinner","updateGamestatus","p1m","p2m","outcome","setup","btns","gameBoradEl","querySelectorAll","forEach","addEventListener","handleMove","player1","Player","resultsEl","querySelector","StatusMessage","Game"],"sources":["rock-paper-scissor.js"],"sourcesContent":["class RockPaperScissors extends Game {\r\n\r\n    MOVES = ['rock', 'paper' , \"scissors\"]\r\n    constructor(selector){\r\n        super(selector)\r\n\r\n        this.setup()\r\n    }\r\n    \r\n    setup(){\r\n       const btns = this.gameBoradEl.querySelectorAll(\".move button\")\r\n       btns.forEach((btn) => {\r\n           btn.addEventListener(\"click\" , this.handleMove)\r\n        })\r\n\r\n        this.player1 = new Player(\"me\")\r\n        this.player2 = new Player(\"computer\")\r\n\r\n        const resultsEl = this.gameBoradEl.querySelector('#round-result')\r\n        new StatusMessage(resultsEl)\r\n    }\r\n\r\n    handleMove = (evt) => {\r\n        const btn = evt.target \r\n        const move = btn.dataset.move\r\n        console.log(\"player1 guess:\", move)\r\n\r\n        const player1move = move;\r\n        const player2move = this.player2.randomGuess(this.MOVES)\r\n\r\n        this.latestOutcome = this.pickWinner(player1move, player2move)\r\n        this.updateGamestatus()\r\n    }\r\n\r\n    pickWinner = (p1m, p2m) => {\r\n        let outcome = ''\r\n\r\n        if (p1m == p2m){ //tie\r\n            outcome = 'tie'\r\n        } else {\r\n            if (p1m == 'rock'){\r\n                if (p2m =='paper'){\r\n                    outcome = 'p2'\r\n                } else {\r\n                    outcome = 'p1'\r\n                }\r\n            } else if (p1m == 'paper') {\r\n                if (p2m == 'rock'){\r\n                    outcome = 'p1'\r\n                } else {\r\n                    outcome = 'p2'\r\n                }\r\n            } else if (p1m == \"scissors\") {\r\n                if (p2m =='rock'){\r\n                    outcome = 'p2'\r\n                } else {\r\n                    outcome = 'p1'\r\n                }\r\n            }\r\n        }\r\n\r\n        return outcome\r\n    }\r\n    updateGamestatus = () => {\r\n\r\n    }\r\n}"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;IAAMA,iB;;;;;EAGF,2BAAYC,QAAZ,EAAqB;IAAA;;IAAA;;IACjB,0BAAMA,QAAN;;IADiB,wDADb,CAAC,MAAD,EAAS,OAAT,EAAmB,UAAnB,CACa;;IAAA,6DAmBR,UAACC,GAAD,EAAS;MAClB,IAAMC,GAAG,GAAGD,GAAG,CAACE,MAAhB;MACA,IAAMC,IAAI,GAAGF,GAAG,CAACG,OAAJ,CAAYD,IAAzB;MACAE,OAAO,CAACC,GAAR,CAAY,gBAAZ,EAA8BH,IAA9B;MAEA,IAAMI,WAAW,GAAGJ,IAApB;;MACA,IAAMK,WAAW,GAAG,MAAKC,OAAL,CAAaC,WAAb,CAAyB,MAAKC,KAA9B,CAApB;;MAEA,MAAKC,aAAL,GAAqB,MAAKC,UAAL,CAAgBN,WAAhB,EAA6BC,WAA7B,CAArB;;MACA,MAAKM,gBAAL;IACH,CA7BoB;;IAAA,6DA+BR,UAACC,GAAD,EAAMC,GAAN,EAAc;MACvB,IAAIC,OAAO,GAAG,EAAd;;MAEA,IAAIF,GAAG,IAAIC,GAAX,EAAe;QAAE;QACbC,OAAO,GAAG,KAAV;MACH,CAFD,MAEO;QACH,IAAIF,GAAG,IAAI,MAAX,EAAkB;UACd,IAAIC,GAAG,IAAG,OAAV,EAAkB;YACdC,OAAO,GAAG,IAAV;UACH,CAFD,MAEO;YACHA,OAAO,GAAG,IAAV;UACH;QACJ,CAND,MAMO,IAAIF,GAAG,IAAI,OAAX,EAAoB;UACvB,IAAIC,GAAG,IAAI,MAAX,EAAkB;YACdC,OAAO,GAAG,IAAV;UACH,CAFD,MAEO;YACHA,OAAO,GAAG,IAAV;UACH;QACJ,CANM,MAMA,IAAIF,GAAG,IAAI,UAAX,EAAuB;UAC1B,IAAIC,GAAG,IAAG,MAAV,EAAiB;YACbC,OAAO,GAAG,IAAV;UACH,CAFD,MAEO;YACHA,OAAO,GAAG,IAAV;UACH;QACJ;MACJ;;MAED,OAAOA,OAAP;IACH,CA3DoB;;IAAA,mEA4DF,YAAM,CAExB,CA9DoB;;IAGjB,MAAKC,KAAL;;IAHiB;EAIpB;;;;WAED,iBAAO;MAAA;;MACJ,IAAMC,IAAI,GAAG,KAAKC,WAAL,CAAiBC,gBAAjB,CAAkC,cAAlC,CAAb;MACAF,IAAI,CAACG,OAAL,CAAa,UAACrB,GAAD,EAAS;QAClBA,GAAG,CAACsB,gBAAJ,CAAqB,OAArB,EAA+B,MAAI,CAACC,UAApC;MACF,CAFF;MAIC,KAAKC,OAAL,GAAe,IAAIC,MAAJ,CAAW,IAAX,CAAf;MACA,KAAKjB,OAAL,GAAe,IAAIiB,MAAJ,CAAW,UAAX,CAAf;MAEA,IAAMC,SAAS,GAAG,KAAKP,WAAL,CAAiBQ,aAAjB,CAA+B,eAA/B,CAAlB;MACA,IAAIC,aAAJ,CAAkBF,SAAlB;IACH;;;;EApB2BG,I"}